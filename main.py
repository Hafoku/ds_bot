import discord
from discord.ext import commands
from discord import app_commands
import logging
import os
import random
import google.generativeai as genai

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ API Gemini
genai.configure(api_key="AIzaSyByUoAgQBqeuf-iVpJFvHTXRI2CWaprct4")
model = genai.GenerativeModel(model_name="gemini-1.5-flash")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –ø–∞–ø–∫—É logs
log_dir = "logs"
if not os.path.exists(log_dir):
    os.makedirs(log_dir)

logging.basicConfig(level=logging.INFO, format='[%(asctime)s] [%(levelname)s] %(message)s', handlers=[
    logging.FileHandler(os.path.join(log_dir, 'bot.log'), encoding='utf-8'),
    logging.StreamHandler()
])

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
def ensure_dir_exists(directory):
    if not os.path.exists(directory):
        os.makedirs(directory)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ª–æ–≥–æ–≤
def save_log(directory, filename, content):
    ensure_dir_exists(directory)
    file_path = os.path.join(directory, filename)
    with open(file_path, "a", encoding="utf-8") as file:
        file.write(content + "\n")
    logging.info(content)  # –î—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –∫–æ–Ω—Å–æ–ª—å

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–Ω—Ç–µ–Ω—Ç–æ–≤
intents = discord.Intents.default()
intents.messages = True
intents.guilds = True
intents.members = True
intents.message_content = True

# –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ Discord
class MyBot(commands.Bot):
    def __init__(self):
        super().__init__(command_prefix="!", intents=intents)

    async def setup_hook(self):
        try:
            await self.tree.sync()
            logging.info("–°–ª—ç—à-–∫–æ–º–∞–Ω–¥—ã —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã.")
            for command in self.tree.get_commands():
                logging.info(f"–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞ –∫–æ–º–∞–Ω–¥–∞: {command.name}")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å–ª—ç—à-–∫–æ–º–∞–Ω–¥: {e}")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = MyBot()

@bot.event
async def on_ready():
    logging.info(f"–ë–æ—Ç {bot.user} –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    await bot.change_presence(activity=discord.Game(name="–ú–æ–¥–µ—Ä–∏—Ä—É—é —Å–µ—Ä–≤–µ—Ä"))
    for command in bot.tree.get_commands():
        logging.info(f"–ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞: {command.name}")

@bot.event
async def on_message(message: discord.Message):
    if message.author.bot:
        return

    if bot.user in message.mentions or message.reference:
        guild_name = message.guild.name if message.guild else "DMs"
        log_dir = f"logs/{guild_name}"
        content = (
            f"[{message.created_at}] {message.author} ({message.author.id}): "
            f"{message.clean_content}"
        )
        save_log(log_dir, "messages.log", content)

    await bot.process_commands(message)

@bot.event
async def on_interaction(interaction: discord.Interaction):
    if interaction.command:
        try:
            guild_name = interaction.guild.name if interaction.guild else "DMs"
            log_dir = f"logs/{guild_name}"

            filename = "requests.log" if interaction.command.name == "–∑–∞–ø—Ä–æ—Å" else "commands.log"
            content = (
                f"[{interaction.created_at}] {interaction.user} ({interaction.user.id}) "
                f"–≤—ã–ø–æ–ª–Ω–∏–ª –∫–æ–º–∞–Ω–¥—É: {interaction.command.name}"
            )

            if interaction.data.get("options"):
                options = interaction.data["options"]
                params = ", ".join(
                    f"{option['name']}={option['value']}" for option in options
                )
                content += f" —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏: {params}"

            save_log(log_dir, filename, content)

        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã: {e}")
@bot.tree.command(name="–∑–∞–ø—Ä–æ—Å", description="–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å –≤ Gemini API")
async def –∑–∞–ø—Ä–æ—Å(interaction: discord.Interaction, –∑–∞–ø—Ä–æ—Å: str):
    try:
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –∏–Ω—Ç–µ—Ä–∞–∫—Ü–∏—é
        await interaction.response.defer()

        # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–º–µ–Ω–∏ —Å–µ—Ä–≤–µ—Ä–∞ –∏–ª–∏ —É–∫–∞–∑–∞–Ω–∏–µ –Ω–∞ –õ–°
        guild_name = interaction.guild.name if interaction.guild else "DMs"

        # –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –≤ API Gemini
        try:
            response = model.generate_content(–∑–∞–ø—Ä–æ—Å)  # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∑–∞–ø—Ä–æ—Å–∞
            result = response.text if hasattr(response, 'text') else None
        except Exception as api_error:
            logging.error(f"–û—à–∏–±–∫–∞ API Gemini: {api_error}")
            await interaction.followup.send(f"–û—à–∏–±–∫–∞ API: {api_error}")
            return

        if not result:
            logging.warning("–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç API Gemini.")
            await interaction.followup.send("API –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            return

        # –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ª–æ–≥–æ–≤ –æ—Ç–≤–µ—Ç–æ–≤
        response_dir = f"logs/{guild_name}/responses"
        ensure_dir_exists(response_dir)  # –£–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å—É—â–µ—Å—Ç–≤—É–µ—Ç

        if len(result) > 2000:
            # –ï—Å–ª–∏ –¥–ª–∏–Ω–∞ –æ—Ç–≤–µ—Ç–∞ –ø—Ä–µ–≤—ã—à–∞–µ—Ç 2000 —Å–∏–º–≤–æ–ª–æ–≤, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ –≤ —Ñ–∞–π–ª
            try:
                existing_files = os.listdir(response_dir)
                count = sum(1 for file in existing_files if file.startswith("–æ—Ç–≤–µ—Ç")) + 1
                filename = f"–æ—Ç–≤–µ—Ç{count}.txt"  # –£–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
                file_path = os.path.join(response_dir, filename)

                # –ó–∞–ø–∏—Å—å –æ—Ç–≤–µ—Ç–∞ –≤ —Ñ–∞–π–ª
                with open(file_path, "w", encoding="utf-8") as file:
                    file.write(result)

                # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞ –≤ –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                with open(file_path, "rb") as file:
                    await interaction.followup.send(
                        "–†–µ–∑—É–ª—å—Ç–∞—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π. –ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ —Ñ–∞–π–ª–µ:",
                        file=discord.File(file, filename=filename)
                    )

                # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
                logging.info(f"–û—Ç–≤–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ —Ñ–∞–π–ª: {file_path}")
            except Exception as file_error:
                logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ —Ñ–∞–π–ª–∞: {file_error}")
                await interaction.followup.send(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {file_error}")
                return
        else:
            # –ï—Å–ª–∏ –¥–ª–∏–Ω–∞ –æ—Ç–≤–µ—Ç–∞ –º–µ–Ω–µ–µ 2000 —Å–∏–º–≤–æ–ª–æ–≤, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–≥–æ –∫–∞–∫ —Ç–µ–∫—Å—Ç
            await interaction.followup.send(f"–†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ø—Ä–æ—Å–∞: {result}")

        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
        content = (
            f"[{interaction.created_at}] {interaction.user} –æ—Ç–ø—Ä–∞–≤–∏–ª –∑–∞–ø—Ä–æ—Å: {–∑–∞–ø—Ä–æ—Å}. "
            f"–û—Ç–≤–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤: {filename if len(result) > 2000 else '—Å–æ–æ–±—â–µ–Ω–∏–∏.'}"
        )
        save_log(f"logs/{guild_name}", "requests.log", content)

    except Exception as e:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ: {e}")
        if not interaction.response.is_done():
            await interaction.followup.send(f"–û—à–∏–±–∫–∞: {e}")

@bot.tree.command(name="–≥–µ–º–±–ª–∏–Ω–≥", description="–ü–æ–ø—Ä–æ–±—É–π —É–¥–∞—á—É! –†–∏—Å–∫–Ω–∏!")
async def –≥–µ–º–±–ª–∏–Ω–≥(interaction: discord.Interaction):
    try:
        chance = random.uniform(0, 1000)
        if chance == 1:
            if interaction.guild and interaction.guild.me.guild_permissions.ban_members:
                if interaction.guild.me.top_role > interaction.user.top_role:
                    await interaction.user.ban(reason="–ü—Ä–æ–∏–≥—Ä–∞–ª –≤ –≥–µ–º–±–ª–∏–Ω–≥–µ —Å —à–∞–Ω—Å–æ–º 0.1%")
                    await interaction.response.send_message(
                        f"–ï–±–∞—Ç—å —Ç—ã —á–º–æ, {interaction.user.mention}! –¢—ã –ø—Ä–æ–∏–≥—Ä–∞–ª –∏ —Ç–µ–ø–µ—Ä—å –∑–∞–±–∞–Ω–µ–Ω. üòµ"
                    )
                else:
                    await interaction.response.send_message(
                        "–ù–µ –º–æ–≥—É –∑–∞–±–∞–Ω–∏—Ç—å —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —É –Ω–µ–≥–æ —Ä–æ–ª—å –≤—ã—à–µ –º–æ–µ–π."
                    )
            else:
                await interaction.response.send_message(
                    "–≠—Ç—É –∫–æ–º–∞–Ω–¥—É –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ."
                )
        elif chance <= 500:
            await interaction.response.send_message(
                f"–ù–∞ —ç—Ç–æ—Ç —Ä–∞–∑ –ø–æ–≤–µ–∑–ª–æ, {interaction.user.mention}! –¢—ã –ø–æ–±–µ–¥–∏–ª! üéâ"
            )
        else:
            await interaction.response.send_message(
                f"–§—É, –ª–æ—Ö, {interaction.user.mention}! –¢—ã –ø—Ä–æ–∏–≥—Ä–∞–ª. üòÇ"
            )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ –≥–µ–º–±–ª–∏–Ω–≥: {e}")
        if not interaction.response.is_done():
            await interaction.response.send_message(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")

TOKEN = "MTMzMjA1NjE1NjcyMTM4MTQ1OQ.Gz-r5L.-gq4V9AoD-UfJ_eZQo244fV260wcAog7WGjbC0"
bot.run(TOKEN)
